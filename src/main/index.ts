import {
  app,
  BrowserWindow,
  Menu,
  ipcMain,
  webContents
} from 'electron';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

import * as path from 'path'
import * as fs from 'fs'

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let mainWindow: BrowserWindow

const createMainWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
//app.on('ready', createMainWindow);


app.whenReady().then(() => {
  createMainWindow()
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});


// Set custom userData-app folder:
//app.setPath('userData', path.join(app.getPath("home"), '/playground'));
//console.log("app.getPath('userData'): ", app.getPath('userData'));
//import { encryptNewDB } from '../common/infopiecesDb/sync'

// https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md#new-databasepath-options
// https://github.com/m4heshd/better-sqlite3-multiple-ciphers/issues/23#issuecomment-1152634207



import { getInfopiecesDbpath } from '../common/infopiecesDb/initializeInfopiecesDb'
let infopiecesDbpath = getInfopiecesDbpath()

import { initializeInfopiecesDB } from '../common/infopiecesDb/initializeInfopiecesDb'
import { insertInfopiece } from '../common/infopiecesDb/sync'

const Database = require('better-sqlite3-multiple-ciphers');
const infopiecesDb = new Database(infopiecesDbpath, {fileMustExist: true; verbose: console.log});
const secret_key = "my-secret-key";

infopiecesDb.pragma(`key='${secret_key}'`);
initializeInfopiecesDB(infopiecesDb);

const insertIP = `
  INSERT INTO infopiecesDb (id, infotext)
  VALUES (ip.id, ip.infotext)`


ipcMain.handle("insert-infopiece-intodb", (event, args) => {
  console.log("ipcMain.on-insert-infopiece-intodb-args: ", args)
  infopiecesDb.prepare(insertIP).run(args)
})


infopiecesDb.close();
